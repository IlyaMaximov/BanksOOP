/*
 * Banks API
 * Banks OOP project for 1C architecture course.
 *
 * OpenAPI spec version: 1.0
 * Contact: pushin.da@phystech.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ResponseWrapperListTransaction;
import io.swagger.client.model.ResponseWrapperTransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient apiClient;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAllTransactionsByCreatorId
     * @param creatorClientId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllTransactionsByCreatorIdCall(Long creatorClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transactions/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (creatorClientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creator_client_id", creatorClientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllTransactionsByCreatorIdValidateBeforeCall(Long creatorClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'creatorClientId' is set
        if (creatorClientId == null) {
            throw new ApiException("Missing the required parameter 'creatorClientId' when calling getAllTransactionsByCreatorId(Async)");
        }
        
        com.squareup.okhttp.Call call = getAllTransactionsByCreatorIdCall(creatorClientId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * lists all transactions made by user
     * @param creatorClientId  (required)
     * @return ResponseWrapperListTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseWrapperListTransaction getAllTransactionsByCreatorId(Long creatorClientId) throws ApiException {
        ApiResponse<ResponseWrapperListTransaction> resp = getAllTransactionsByCreatorIdWithHttpInfo(creatorClientId);
        return resp.getData();
    }

    /**
     * 
     * lists all transactions made by user
     * @param creatorClientId  (required)
     * @return ApiResponse&lt;ResponseWrapperListTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseWrapperListTransaction> getAllTransactionsByCreatorIdWithHttpInfo(Long creatorClientId) throws ApiException {
        com.squareup.okhttp.Call call = getAllTransactionsByCreatorIdValidateBeforeCall(creatorClientId, null, null);
        Type localVarReturnType = new TypeToken<ResponseWrapperListTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * lists all transactions made by user
     * @param creatorClientId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTransactionsByCreatorIdAsync(Long creatorClientId, final ApiCallback<ResponseWrapperListTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTransactionsByCreatorIdValidateBeforeCall(creatorClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseWrapperListTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transfer
     * @param clientId  (required)
     * @param sourceAccountId  (required)
     * @param targetAccountId  (required)
     * @param currency  (required)
     * @param amount  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferCall(Long clientId, Long sourceAccountId, Long targetAccountId, String currency, Long amount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/bank/client/{clientId}/transaction/create"
            .replaceAll("\\{" + "clientId" + "\\}", apiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sourceAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_account_id", sourceAccountId));
        if (targetAccountId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_account_id", targetAccountId));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        if (amount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferValidateBeforeCall(Long clientId, Long sourceAccountId, Long targetAccountId, String currency, Long amount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling transfer(Async)");
        }
        // verify the required parameter 'sourceAccountId' is set
        if (sourceAccountId == null) {
            throw new ApiException("Missing the required parameter 'sourceAccountId' when calling transfer(Async)");
        }
        // verify the required parameter 'targetAccountId' is set
        if (targetAccountId == null) {
            throw new ApiException("Missing the required parameter 'targetAccountId' when calling transfer(Async)");
        }
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling transfer(Async)");
        }
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling transfer(Async)");
        }
        
        com.squareup.okhttp.Call call = transferCall(clientId, sourceAccountId, targetAccountId, currency, amount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Creates a new transaction authorized by {clientId}
     * @param clientId  (required)
     * @param sourceAccountId  (required)
     * @param targetAccountId  (required)
     * @param currency  (required)
     * @param amount  (required)
     * @return ResponseWrapperTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseWrapperTransaction transfer(Long clientId, Long sourceAccountId, Long targetAccountId, String currency, Long amount) throws ApiException {
        ApiResponse<ResponseWrapperTransaction> resp = transferWithHttpInfo(clientId, sourceAccountId, targetAccountId, currency, amount);
        return resp.getData();
    }

    /**
     * 
     * Creates a new transaction authorized by {clientId}
     * @param clientId  (required)
     * @param sourceAccountId  (required)
     * @param targetAccountId  (required)
     * @param currency  (required)
     * @param amount  (required)
     * @return ApiResponse&lt;ResponseWrapperTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseWrapperTransaction> transferWithHttpInfo(Long clientId, Long sourceAccountId, Long targetAccountId, String currency, Long amount) throws ApiException {
        com.squareup.okhttp.Call call = transferValidateBeforeCall(clientId, sourceAccountId, targetAccountId, currency, amount, null, null);
        Type localVarReturnType = new TypeToken<ResponseWrapperTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new transaction authorized by {clientId}
     * @param clientId  (required)
     * @param sourceAccountId  (required)
     * @param targetAccountId  (required)
     * @param currency  (required)
     * @param amount  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferAsync(Long clientId, Long sourceAccountId, Long targetAccountId, String currency, Long amount, final ApiCallback<ResponseWrapperTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferValidateBeforeCall(clientId, sourceAccountId, targetAccountId, currency, amount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseWrapperTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
