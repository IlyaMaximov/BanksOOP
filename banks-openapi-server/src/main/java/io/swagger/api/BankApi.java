/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Client;
import org.threeten.bp.LocalDate;
import io.swagger.model.ResponseWrapperBank;
import io.swagger.model.ResponseWrapperClientWrapper;
import io.swagger.model.ResponseWrapperDepositAccount;
import io.swagger.model.ResponseWrapperListBaseAccount;
import io.swagger.model.ResponseWrapperListClient;
import io.swagger.model.ResponseWrapperTransaction;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-24T08:53:36.820Z[GMT]")
@Validated
public interface BankApi {

    @Operation(summary = "", description = "Creates a new client in bank with {bankId}", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperClientWrapper.class))) })
    @RequestMapping(value = "/bank/{bankId}/client/add",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseWrapperClientWrapper> addClient(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bankId") Long bankId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "first_name", required = true) String firstName, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "second_name", required = true) String secondName);


    @Operation(summary = "", description = "Creates new bank", tags={ "bank" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperBank.class))) })
    @RequestMapping(value = "/bank/create",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseWrapperBank> createBank(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "debit_percentage", required = true) Double debitPercentage, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "credit_commission", required = true) Double creditCommission, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "unverified_amount_limit", required = true) Long unverifiedAmountLimit);


    @Operation(summary = "", description = "Creates bank deposit account for client with {clientId} ", tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperDepositAccount.class))) })
    @RequestMapping(value = "/bank/client/{clientId}/account/deposit/create",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseWrapperDepositAccount> createDeposit(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("clientId") Long clientId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "up_to_date", required = true) LocalDate upToDate);


    @Operation(summary = "", description = "Edits client with {clientID} in bank", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperClientWrapper.class))) })
    @RequestMapping(value = "/bank/client/{clientId}/edit",
        produces = { "*/*" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ResponseWrapperClientWrapper> editClient(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("clientId") Long clientId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Client body);


    @Operation(summary = "", description = "Lists all bank accounts", tags={ "bank" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperListBaseAccount.class))) })
    @RequestMapping(value = "/bank/{bankId}/accounts",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseWrapperListBaseAccount> getBankAccounts(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bankId") Long bankId);


    @Operation(summary = "", description = "Get clients of bank with {bankId}", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperListClient.class))) })
    @RequestMapping(value = "/bank/{bankId}/clients",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseWrapperListClient> getBankClients(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bankId") Long bankId);


    @Operation(summary = "", description = "Get client info", tags={ "client" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperClientWrapper.class))) })
    @RequestMapping(value = "/bank/client/{clientId}",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseWrapperClientWrapper> getClient(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("clientId") Long clientId);


    @Operation(summary = "", description = "Creates a new transaction authorized by {clientId}", tags={ "transaction" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "*/*", schema = @Schema(implementation = ResponseWrapperTransaction.class))) })
    @RequestMapping(value = "/bank/client/{clientId}/transaction/create",
        produces = { "*/*" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseWrapperTransaction> transfer(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("clientId") Long clientId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "source_account_id", required = true) Long sourceAccountId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "target_account_id", required = true) Long targetAccountId, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema(allowableValues={ "RUB", "USD", "EUR" }
)) @Valid @RequestParam(value = "currency", required = true) String currency, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "amount", required = true) Long amount);

}

